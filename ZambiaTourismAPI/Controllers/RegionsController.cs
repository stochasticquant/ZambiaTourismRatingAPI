using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ZambiaTourismAPI.Data;
using ZambiaTourismAPI.Models.Domain;
using ZambiaTourismAPI.Models.DTO;

namespace ZambiaTourismAPI.Controllers
{
    // https://localhost:5001/api/regions : [controller] is replaced with the name of the controller class minus the word 'Controller'
    [Route("api/[controller]")]
    [ApiController]
    public class RegionsController : ControllerBase
    {
        // create a property of the TouristSitesDBContext class to hold the database context instance
        private readonly TouristSitesDBContext _dbContext;

        public RegionsController(TouristSitesDBContext dbContext)
        {
            _dbContext = dbContext; 
        }

        // GET ALL REGIONS
        // GET: https://localhost:portnumber/api/regions
        [HttpGet]
        public async Task<IActionResult> GetAllRegions()
        {
            // Get Data from the database : Domain Models
            var regionsDomain =  await _dbContext.Regions.ToListAsync();

            // Map Domain models to DTOs : convert Domain models to DTOs
            var regionsDTO = new List<RegionDTO>();
            foreach (var region in regionsDomain)
            {
                regionsDTO.Add(new RegionDTO
                {
                    // Map Domain models to DTOs
                    Id = region.Id,
                    RegionCode = region.RegionCode,
                    RegionName = region.RegionName,
                    RegionDescription = region.RegionDescription,
                    RegionImage = region.RegionImage,
                    RegionURL = region.RegionURL
                });
            }

            // Return DTOs
            return Ok(regionsDTO);
        }

        // GET REGION BY ID
        // GET: https://localhost:portnumber/api/regions/{id}
        [HttpGet]
        [Route("{id:Guid}")]
        public async Task<IActionResult> GetRegionById(Guid id)
        {
            //var region = _dbContext.Regions.Find(id);  : only works for primary keys
            var regionDomain = await _dbContext.Regions.FirstOrDefaultAsync(x => x.Id == id);  //works for all fields in the table

            if (regionDomain == null)
            {
                return NotFound();
            }

            // Map Domain models to DTOs based on id
            var regionDTO = new RegionDTO
            {
                Id = regionDomain.Id,
                RegionCode = regionDomain.RegionCode,
                RegionName = regionDomain.RegionName,
                RegionDescription = regionDomain.RegionDescription,
                RegionImage = regionDomain.RegionImage,
                RegionURL = regionDomain.RegionURL
            };

            return Ok(regionDTO);
        }

        // POST to CREATE REGION
        // POST: https://localhost:portnumber/api/regions : no new route is needed : we get a json object from the request body
        [HttpPost]
        public async Task<IActionResult> CreateRegion([FromBody] AddRegionRequestDTO addRegionRequestDTO)
        {
            // Map DTOs to Domain models : id is not included because it is generated by the database
            var regionDomainModel  = new Region
            {
                RegionCode = addRegionRequestDTO.RegionCode,
                RegionName = addRegionRequestDTO.RegionName,
                RegionDescription = addRegionRequestDTO.RegionDescription,
                RegionImage = addRegionRequestDTO.RegionImage,
                RegionURL = addRegionRequestDTO.RegionURL
            };

            // Add the new region to the database
            await _dbContext.Regions.AddAsync(regionDomainModel);
            await _dbContext.SaveChangesAsync();

            // Return a 201 status code : we want to return the location of the new resource and the new resource itself to show to the client
            // We map the domain model to a DTO
            var regionDTO = new RegionDTO
            {
                Id = regionDomainModel.Id,   // id has been generated by the database and we mapping it back to the DTO
                RegionCode = regionDomainModel.RegionCode,
                RegionName = regionDomainModel.RegionName,
                RegionDescription = regionDomainModel.RegionDescription,
                RegionImage = regionDomainModel.RegionImage,
                RegionURL = regionDomainModel.RegionURL
            };
            return CreatedAtAction(nameof(GetRegionById), new {id = regionDomainModel.Id}, regionDomainModel);
        }

        // UPDATE REGION
        // PUT: https://localhost:portnumber/api/regions/{id}
        [HttpPut]
        [Route("{id:Guid}")]  // only Guids are allowed
        public async Task<IActionResult> UpdateRegion([FromRoute] Guid id, [FromBody] UpdateRegionRequestDTO updateRegionRequestDTO)
        {
            // Get the region from the database
            var regionDomainModel = await _dbContext.Regions.FirstOrDefaultAsync(x => x.Id == id);
            if (regionDomainModel == null)
            {
                return NotFound();
            }
            // Map the DTO to the domain model : we are accepting a DTO from the client and we are updating the domain model
            regionDomainModel.RegionCode = updateRegionRequestDTO.RegionCode;
            regionDomainModel.RegionName = updateRegionRequestDTO.RegionName;
            regionDomainModel.RegionDescription = updateRegionRequestDTO.RegionDescription;
            regionDomainModel.RegionImage = updateRegionRequestDTO.RegionImage;
            regionDomainModel.RegionURL = updateRegionRequestDTO.RegionURL;
            // Save the changes
            await _dbContext.SaveChangesAsync();

            // Map the domain model to a DTO : we are returning the updated domain model to the client
            var regionDTO = new RegionDTO
            {
                Id = regionDomainModel.Id,
                RegionCode = regionDomainModel.RegionCode,
                RegionName = regionDomainModel.RegionName,
                RegionDescription = regionDomainModel.RegionDescription,
                RegionImage = regionDomainModel.RegionImage,
                RegionURL = regionDomainModel.RegionURL
            };
            return Ok(regionDTO);
        }

        // DELETE REGION
        // DELETE: https://localhost:portnumber/api/regions/{id}
        [HttpDelete]
        [Route("{id:Guid}")]
        public async Task<IActionResult> DeleteRegion([FromRoute] Guid id)
        {
            // Get the region from the database
            var regionDomainModel = await _dbContext.Regions.FirstOrDefaultAsync(x => x.Id == id);
            if (regionDomainModel == null)
            {
                return NotFound();
            }
            // Remove the region from the database
            _dbContext.Regions.Remove(regionDomainModel);
            await _dbContext.SaveChangesAsync();

            // return the deleted region
            var regionDTO = new RegionDTO
            {
                Id = regionDomainModel.Id,
                RegionCode = regionDomainModel.RegionCode,
                RegionName = regionDomainModel.RegionName,
                RegionDescription = regionDomainModel.RegionDescription,
                RegionImage = regionDomainModel.RegionImage,
                RegionURL = regionDomainModel.RegionURL
            };
            return Ok(regionDTO);
        }

    }
}
